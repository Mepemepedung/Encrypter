const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const { Buffer } = require('buffer');
const readline = require('readline');

// Function to encrypt content multiple times
function encryptMultipleTimes(content, times) {
    for (let i = 1; i <= times; i++) {
        content = Buffer.from(content).toString('base64');
        console.log(`Encrypted ${i} time(s)`);
    }
    return content;
}

// Function to create decryption script
function createDecryptionScript(outputFolder, filename, times, password) {
    const encodedPassword = Buffer.from(password).toString('base64'); // Encode password to Base64

    const decryptionScriptContent = `
import base64
import os

def decrypt_content():
    encoded_password = "${encodedPassword}"
    password = base64.b64decode(encoded_password).decode()  # Decode password

    user_password = input("Enter the password for decryption: ")
    if user_password != password:
        print("Incorrect password!")
        return
    
    encrypted_file_path = "${filename}_${times}times.txt"
    with open(encrypted_file_path, "r") as file:
        encrypted_content = file.read()
    
    decrypted_content = encrypted_content
    for _ in range(${times}):
        decrypted_content = base64.b64decode(decrypted_content).decode()
    
    decrypted_folder = "${filename}_${times}_Decrypted"
    if not os.path.exists(decrypted_folder):
        os.mkdir(decrypted_folder)

    decrypted_file_path = os.path.join(decrypted_folder, "${filename}_${times}_Decrypted.txt")
    with open(decrypted_file_path, 'w') as decrypted_file:
        decrypted_file.write(decrypted_content)
    
    print("Decrypted content has been saved in:", decrypted_file_path)

if __name__ == "__main__":
    decrypt_content()
`;

    const decryptionScriptPath = path.join(outputFolder, `decrypt_${filename}_${times}times.py`);
    fs.writeFileSync(decryptionScriptPath, decryptionScriptContent);
    console.log(`Decryption script created: ${decryptionScriptPath}`);

    // Convert the decryption script to an executable using PyInstaller
    execSync(`pyinstaller --onefile ${decryptionScriptPath}`, { stdio: 'inherit' });

    // Clean up the .spec file and extra files generated by PyInstaller
    fs.unlinkSync(decryptionScriptPath);
    fs.renameSync(path.join('dist', `decrypt_${filename}_${times}times.exe`), path.join(outputFolder, `decrypt_${filename}_${times}times.exe`));

    // Cleanup command - adjust for Windows or Unix-based OS
    try {
        if (process.platform === 'win32') {
            execSync('rmdir /s /q dist build');
            fs.unlinkSync(`${filename}_${times}times.spec`);
        } else {
            execSync('rm -r dist build *.spec', { stdio: 'inherit' });
        }
    } catch (error) {
        console.error('Error cleaning up:', error);
    }
}

// Main function to handle user input
function main() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question("Enter the name of the text document (with extension, e.g., example.txt): ", (filename) => {
        if (fs.existsSync(filename)) {
            const fileContent = fs.readFileSync(filename, 'utf-8');

            rl.question("How many times do you want to encrypt the content (e.g., 10): ", (timesInput) => {
                const times = parseInt(timesInput, 10);

                rl.question("Enter a password for decryption: ", (password) => {
                    const encodedContent = encryptMultipleTimes(fileContent, times);

                    const folderName = `${filename.split('.')[0]}_${times}times`;
                    if (!fs.existsSync(folderName)) {
                        fs.mkdirSync(folderName);
                    }

                    const newFilePath = path.join(folderName, `${filename.split('.')[0]}_${times}times.txt`);
                    fs.writeFileSync(newFilePath, encodedContent);

                    console.log(`Final encrypted content has been saved in ${newFilePath}`);

                    createDecryptionScript(folderName, filename.split('.')[0], times, password);

                    rl.close();
                });
            });
        } else {
            console.log(`File ${filename} does not exist in the current directory.`);
            rl.close();
        }
    });
}

main();
